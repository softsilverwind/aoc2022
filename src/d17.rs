// Just wondering if anyone reads these source codes

use std::collections::HashSet as ΣύνολοΚατακερματισμού;

use Clone as Κλώνος;
use Copy as Αντίγραφο;
use derive as κληρονόμησε;
use panic as πανικοβλήσου;
use i64 as α64;
use bool as λογικός;

struct Πεδίο
{
    κατειλημμένα: ΣύνολοΚατακερματισμού<(α64, α64)>
}

#[κληρονόμησε(Κλώνος, Αντίγραφο)]
enum Τούβλο
{
    Γραμμή, Σταυρός, Γωνία, Στήλη, Τετράγωνο
}

#[κληρονόμησε(Κλώνος, Αντίγραφο)]
enum Κατεύθυνση
{
    Αριστερά, Δεξιά
}

impl Πεδίο
{
    fn κατειλημμένο(&self, (x, y): (α64, α64)) -> λογικός
    {
        return x < 0 || x > 6 || self.κατειλημμένα.contains(&(x, y))
    }

    fn υπάρχει_κατειλημμένο(&self, συντεταγμένες: &[(α64, α64)]) -> λογικός
    {
        συντεταγμένες.iter().copied().any(|(χ, ψ)| self.κατειλημμένο((χ, ψ)))
    }

    fn προσθήκη(&mut self, συντεταγμένες: &[(α64, α64)])
    {
        self.κατειλημμένα.extend(συντεταγμένες.iter());
    }

    fn νέο() -> Self
    {
        let mut κατειλημμένα = ΣύνολοΚατακερματισμού::new();

        κατειλημμένα.insert((0, 0));
        κατειλημμένα.insert((1, 0));
        κατειλημμένα.insert((2, 0));
        κατειλημμένα.insert((3, 0));
        κατειλημμένα.insert((4, 0));
        κατειλημμένα.insert((5, 0));
        κατειλημμένα.insert((6, 0));

        Πεδίο { κατειλημμένα }
    }
}

pub fn simple()
{
    use Τούβλο::*;
    use Κατεύθυνση::*;

    let mut πεδίο = Πεδίο::νέο();
    let είσοδος = std::io::read_to_string(std::io::stdin()).unwrap();
    let επαναλήπτης_κατευθύνσεων = είσοδος
        .trim_end()
        .bytes()
        .map(|x| {
            match x {
                b'<' => Αριστερά,
                b'>' => Δεξιά,
                _ => πανικοβλήσου!("Εμφανίστηκε μυστηριώδης κατεύθυνση στην είσοδο μάστορα")
            }
        })
        .cycle();

    let mut επαναλήπτης_τούβλων = [Γραμμή, Σταυρός, Γωνία, Στήλη, Τετράγωνο].into_iter().cycle();
    let mut τρέχον_τούβλο = επαναλήπτης_τούβλων.next().unwrap();
    let mut πλήθος_τούβλων: α64 = 1;
    let (mut χ, mut ψ): (α64, α64) = (2, 4);
    let mut υψηλότερο_σημείο: α64 = 0;

    for κατεύθυνση in επαναλήπτης_κατευθύνσεων {
        let πλαϊνή_κίνηση = match (τρέχον_τούβλο, κατεύθυνση) { 
            (Γραμμή, Αριστερά) => !πεδίο.κατειλημμένο((χ-1, ψ)),
            (Γραμμή, Δεξιά) => !πεδίο.κατειλημμένο((χ+4, ψ)),
            (Σταυρός, Αριστερά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ, ψ), (χ-1, ψ+1), (χ, ψ+2)]),
            (Σταυρός, Δεξιά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ+2, ψ), (χ+3, ψ+1), (χ+2, ψ+2)]),
            (Γωνία, Αριστερά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ-1, ψ), (χ+1, ψ+1), (χ+1, ψ+2)]),
            (Γωνία, Δεξιά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ+3, ψ), (χ+3, ψ+1), (χ+3, ψ+2)]),
            (Στήλη, Αριστερά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ-1, ψ), (χ-1, ψ+1), (χ-1, ψ+2), (χ-1, ψ+3)]),
            (Στήλη, Δεξιά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ+1, ψ), (χ+1, ψ+1), (χ+1, ψ+2), (χ+1, ψ+3)]),
            (Τετράγωνο, Αριστερά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ-1, ψ), (χ-1, ψ+1)]),
            (Τετράγωνο, Δεξιά) => !πεδίο.υπάρχει_κατειλημμένο(&[(χ+2, ψ), (χ+2, ψ+1)])
        };

        if πλαϊνή_κίνηση {
            match κατεύθυνση {
                Αριστερά => χ -= 1,
                Δεξιά => χ += 1
            }
        }

        let κατακόρυφη_κίνηση = match τρέχον_τούβλο {
            Γραμμή => !πεδίο.υπάρχει_κατειλημμένο(&[(χ, ψ-1), (χ+1, ψ-1), (χ+2, ψ-1), (χ+3, ψ-1)]),
            Σταυρός => !πεδίο.υπάρχει_κατειλημμένο(&[(χ, ψ), (χ+1, ψ-1), (χ+2, ψ)]),
            Γωνία => !πεδίο.υπάρχει_κατειλημμένο(&[(χ, ψ-1), (χ+1, ψ-1), (χ+2, ψ-1)]),
            Στήλη => !πεδίο.κατειλημμένο((χ, ψ-1)),
            Τετράγωνο => !πεδίο.υπάρχει_κατειλημμένο(&[(χ, ψ-1), (χ+1, ψ-1)]),
        };

        if κατακόρυφη_κίνηση {
            ψ -= 1;
        }
        else {
            match τρέχον_τούβλο {
                Γραμμή => πεδίο.προσθήκη(&[(χ, ψ), (χ+1, ψ), (χ+2, ψ), (χ+3, ψ)]),
                Σταυρός => πεδίο.προσθήκη(&[(χ, ψ+1), (χ+1, ψ), (χ+1, ψ+1), (χ+1, ψ+2), (χ+2, ψ+1)]),
                Γωνία => πεδίο.προσθήκη(&[(χ, ψ), (χ+1, ψ), (χ+2, ψ), (χ+2, ψ+1), (χ+2, ψ+2)]),
                Στήλη => πεδίο.προσθήκη(&[(χ, ψ), (χ, ψ+1), (χ, ψ+2), (χ, ψ+3)]),
                Τετράγωνο => πεδίο.προσθήκη(&[(χ, ψ), (χ+1, ψ), (χ+1, ψ+1), (χ, ψ+1)])
            }

            let ύψος = match τρέχον_τούβλο {
                Γραμμή => ψ,
                Σταυρός => ψ+2,
                Γωνία => ψ+2,
                Στήλη => ψ+3,
                Τετράγωνο => ψ+1,
            };

            υψηλότερο_σημείο = υψηλότερο_σημείο.max(ύψος);

            if πλήθος_τούβλων == 2022 {
                break;
            }
            πλήθος_τούβλων += 1;

            τρέχον_τούβλο = επαναλήπτης_τούβλων.next().unwrap();

            χ = 2;
            ψ = υψηλότερο_σημείο + 4;
        }
    }
    println!("{}", υψηλότερο_σημείο);
}

pub fn complex()
{
}
 